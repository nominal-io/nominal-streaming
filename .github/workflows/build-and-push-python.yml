name: Build and Push Python Bindings
on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch: {}

env:
  CARGO_TERM_COLOR: always
  MATURIN_VERSION: v1.9.3

defaults:
  run:
    shell: bash

jobs:
  build-and-publish:
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # --- manylinux (auto) ---
          - label: linux-x86_64
            os: linux
            runner: ubuntu-22.04
            target: x86_64
            manylinux: auto
            env: {}
          - label: linux-armv7
            os: linux
            runner: ubuntu-22.04
            target: armv7
            manylinux: auto
            env: {}

          # --- musllinux ---
          - label: musllinux-x86_64
            os: musllinux
            runner: ubuntu-22.04
            target: x86_64
            manylinux: musllinux_1_2
            env:
              OPENSSL_DIR: /usr
          - label: musllinux-aarch64
            os: musllinux
            runner: ubuntu-22.04
            target: aarch64
            manylinux: musllinux_1_2
            env:
              OPENSSL_DIR: /usr
          - label: musllinux-armv7
            os: musllinux
            runner: ubuntu-22.04
            target: armv7
            manylinux: musllinux_1_2
            env:
              OPENSSL_DIR: /usr

          # --- Windows ---
          - label: windows-x64
            os: windows
            runner: windows-latest
            target: x64
            manylinux: "" # ignored
            python_arch: x64
            env:
              CARGO_FEATURE_VENDORED: "1"
              OPENSSL_SYS_VENDORED: "1"

          # --- macOS ---
          - label: macos-aarch64
            os: macos
            runner: macos-14
            target: aarch64
            manylinux: "" # ignored
            env: {}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python (Windows)
        if: ${{ matrix.os == 'windows' }}
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.python_arch }}

      - name: Install Python (non-windows)
        if: ${{ matrix.os != 'windows' }}
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install OpenSSL (macOS)
        if: ${{ matrix.os == 'macos' }}
        run: |
          set -euo pipefail
          brew install openssl@3
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV

      # Build wheels (Linux/musllinux) with pre-install script & manylinux param
      - name: Build wheels (Linux family)
        if: ${{ matrix.os == 'linux' || matrix.os == 'musllinux' }}
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -m py-nominal-streaming/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: ${{ matrix.manylinux }}
          maturin-version: ${{ env.MATURIN_VERSION }}
          before-script-linux: |
            if command -v yum &> /dev/null; then
              yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic
              if [[ ! -d "/usr/lib64" ]]; then
                ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
              fi
            else
              apt update -y && apt-get install -y libssl-dev openssl pkg-config
            fi
        env: ${{ matrix.env }}

      # Build wheels (Windows/macOS)
      - name: Build wheels (Windows/macOS)
        if: ${{ matrix.os == 'windows' || matrix.os == 'macos' }}
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -m py-nominal-streaming/Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          maturin-version: ${{ env.MATURIN_VERSION }}
        env: ${{ matrix.env }}

      - name: Install UV
        uses: astral-sh/setup-uv@v7
        with:
          version: "0.8.x"
          enable-cache: false

      - name: Publish wheel
        run: |
          uv publish --token ${{ secrets.PYPI_TOKEN }}
